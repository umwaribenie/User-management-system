basePath: /
definitions:
  models.ConfirmOtpRequest:
    properties:
      otp:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - otp
    - password
    type: object
  models.CreateUserByAdminRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      nationalId:
        type: string
      passportNumber:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      profilePicture:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        description: Updated validation
        enum:
        - user
        - admin
      username:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - phone
    - role
    - username
    type: object
  models.CreateUserRequest:
    properties:
      clientId:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      nationalId:
        type: string
      passportNumber:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      profilePicture:
        type: string
      username:
        type: string
    required:
    - clientId
    - email
    - firstName
    - lastName
    - password
    - phone
    - username
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.LoginRequest:
    properties:
      clientId:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    type: object
  models.LoginResponse:
    properties:
      accessToken:
        type: string
    type: object
  models.PaginatedResponse:
    properties:
      currentPage:
        type: integer
      lastPage:
        type: integer
      list: {}
      nextPage:
        type: integer
      previousPage:
        type: integer
      status:
        type: string
      total:
        type: integer
    type: object
  models.PasswordResetRequest:
    properties:
      clientId:
        type: string
      username:
        type: string
    type: object
  models.ResetPasswordRequest:
    properties:
      clientId:
        type: string
      username:
        type: string
    type: object
  models.ResetPasswordWithTokenRequest:
    properties:
      newPassword:
        minLength: 6
        type: string
    required:
    - newPassword
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.UpdatePasswordRequest:
    properties:
      newPassword:
        minLength: 6
        type: string
      oldPassword:
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      nationalId:
        type: string
      passportNumber:
        type: string
      phone:
        type: string
      profilePicture:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        enum:
        - user
        - admin
      username:
        type: string
    type: object
  models.User:
    properties:
      clientId:
        type: string
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      nationalId:
        type: string
      passportNumber:
        type: string
      phone:
        type: string
      profilePicture:
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      slug:
        type: string
      status:
        $ref: '#/definitions/models.UserStatus'
      updatedAt:
        type: string
      username:
        type: string
    type: object
  models.UserRole:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
  models.UserStatus:
    enum:
    - active
    - inactive
    - deleted
    type: string
    x-enum-varnames:
    - ActiveStatus
    - InactiveStatus
    - DeletedStatus
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: This is the API for the user management system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Management API
  version: "1.0"
paths:
  /auth/check:
    get:
      consumes:
      - application/json
      description: Checks if the provided JWT token is valid. This endpoint requires
        an authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Check if the user is authenticated
      tags:
      - auth
  /auth/confirm-password-reset-otp:
    post:
      consumes:
      - application/json
      description: Confirms the OTP and sets a new password.
      parameters:
      - description: Confirm OTP request
        in: body
        name: confirmOTP
        required: true
        schema:
          $ref: '#/definitions/models.ConfirmOtpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Confirm password reset OTP
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT access token.
      parameters:
      - description: Login credentials
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /auth/password-reset:
    post:
      consumes:
      - application/json
      description: Sends a password reset OTP to the user's registered phone or email.
      parameters:
      - description: Password reset request
        in: body
        name: passwordReset
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Request password reset
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Allows a user to reset their password using a provided token.
      parameters:
      - description: Password reset token
        in: query
        name: token
        required: true
        type: string
      - description: New password
        in: body
        name: newPassword
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordWithTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Reset password with token
      tags:
      - auth
  /auth/reset-password/email:
    post:
      consumes:
      - application/json
      description: Sends a password reset OTP to the user's registered email.
      parameters:
      - description: Reset password via email request
        in: body
        name: resetPassword
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Reset password via email
      tags:
      - auth
  /auth/update-password:
    post:
      consumes:
      - application/json
      description: Allows an authenticated user to change their own password.
      parameters:
      - description: Update password request
        in: body
        name: updatePassword
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update password
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all users, with support for pagination, searching,
        and filtering.
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: pageNumber
        type: integer
      - default: 10
        description: Number of users per page
        in: query
        name: pageSize
        type: integer
      - description: Start date for user creation (YYYY-MM-DD)
        in: query
        name: from
        type: string
      - description: End date for user creation (YYYY-MM-DD)
        in: query
        name: to
        type: string
      - description: Search term for user details (first name, last name, email, username)
        in: query
        name: search
        type: string
      - description: Filter by user role
        enum:
        - user
        - admin
        in: query
        name: role
        type: string
      - description: Filter by user status
        enum:
        - active
        - inactive
        - deleted
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by their unique ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves a user's details using their unique ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Updates a user's details by their unique ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a user
      tags:
      - users
  /users/{id}/update-password/admin:
    post:
      consumes:
      - application/json
      description: Allows an admin to update a user's password.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update password request
        in: body
        name: updatePassword
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update password by admin
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with a default 'user' role.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - users
  /users/registerusersbyadmin:
    post:
      consumes:
      - application/json
      description: Creates a new user account with a specified role.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserByAdminRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user by admin
      tags:
      - users
  /users/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Retrieves a user's details using their URL-friendly slug.
      parameters:
      - description: User Slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Find a user by slug
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
